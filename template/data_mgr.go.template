// Code generated by excelexporter. DO NOT EDIT
package cfg

import (
    "errors"
    "excelexporter/example/pb"
    "sync/atomic"
)

var (
    isLoading   = int32(0)
    {{range.Mgrs}}//{{.CodeComment}}
    {{if eq .MgrType "map"}}{{.MessageName}}Mgr *DataMap[*pb.{{.MessageName}}]{{end}}
    {{if eq .MgrType "slice"}}{{.MessageName}}Mgr *DataSlice[*pb.{{.MessageName}}]{{end}}
    {{if eq .MgrType "object"}}{{.MessageName}}Mgr *pb.{{.MessageName}}{{end}}{{end}}
)

func Load(dataDir string) error {
    if !atomic.CompareAndSwapInt32(&isLoading, 0, 1) {
        return errors.New("loading concurrency")
    }
    defer atomic.StoreInt32(&isLoading, 0)
    var err error
    // 考虑到并发安全,这里先加载到临时变量
    {{range.Mgrs}}
    {{if eq .MgrType "map"}}tmp{{.MessageName}}Mgr := NewDataMap[*pb.{{.MessageName}}]()
    err = tmp{{.MessageName}}Mgr.LoadJson(dataDir+"{{.MessageName}}.json")
    {{else if eq .MgrType "slice"}}tmp{{.MessageName}}Mgr := &DataSlice[*pb.{{.MessageName}}]{}
        err = tmp{{.MessageName}}Mgr.LoadJson(dataDir+"{{.MessageName}}.json")
    {{end}}if err != nil {
        return err
    }{{end}}
    // 预处理数据
    {{range.Mgrs}}
    err = PreProcess("{{.MessageName}}", tmp{{.MessageName}}Mgr)
    if err != nil {
        return err
    }{{end}}
    // 最后再赋值给全局变量(引用赋值是原子操作)
    {{range.Mgrs}}
    {{.MessageName}}Mgr = tmp{{.MessageName}}Mgr{{end}}
    return err
}

